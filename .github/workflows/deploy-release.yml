name: Deploy and Tag Release

on:
  push:
    branches:
      - main
      - dev
      - hml

    paths-ignore:
      - 'package.json'
      - 'package-lock.json'

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm ci

      - name: Run full quality check before deploy
        run: |
          echo "üîç Executando verifica√ß√µes finais..."
          npm run lint
          npm run test:cov -- --testPathPattern=".*\.service\.spec\.ts$" --collectCoverageFrom="src/**/*.service.ts"

          # Verificar se o arquivo de coverage existe
          if [ -f "coverage/coverage-summary.json" ]; then
            COVERAGE=$(node -p "JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json', 'utf8')).total.lines.pct || 0")
            echo "Test Coverage: $COVERAGE%"
            if [ $(echo "$COVERAGE < 60" | bc -l) -eq 1 ]; then
              echo "‚ùå Deploy cancelado - Cobertura abaixo de 60% (atual: $COVERAGE%)"
              exit 1
            fi
            echo "‚úÖ Cobertura de $COVERAGE% est√° adequada"
          else
            echo "‚ùå Arquivo de cobertura n√£o encontrado"
            ls -la coverage/ || echo "Pasta coverage n√£o existe"
            exit 1
          fi

      - name: Final SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          npm install -g sonar-scanner

          sonar-scanner \
            -Dsonar.projectKey=Athenas-Corp_Athenas \
            -Dsonar.organization=athenas-corp \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${SONAR_TOKEN} \
            -Dsonar.branch.name=${GITHUB_REF#refs/heads/}

      - name: Get current version and calculate next version
        id: version
        run: |
          CURRENT_VERSION=$(jq -r .version package.json)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Buscar √∫ltima tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT

          # Extrair n√∫meros da vers√£o (remove 'v' se existir)
          CLEAN_VERSION=${LAST_TAG#v}

          # Separar major, minor, patch
          IFS='.' read -ra VERSION_PARTS <<< "$CLEAN_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}

          # Incrementar patch
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          NEW_TAG="v$NEW_VERSION"

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

          echo "üìã Vers√£o atual no package.json: $CURRENT_VERSION"
          echo "üìã √öltima tag: $LAST_TAG"
          echo "üìã Nova vers√£o: $NEW_VERSION"
          echo "üìã Nova tag: $NEW_TAG"

      - name: Update package.json version
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"

          # Atualizar package.json
          jq ".version = \"$NEW_VERSION\"" package.json > package.json.tmp
          mv package.json.tmp package.json

          # Atualizar package-lock.json se existir
          if [ -f package-lock.json ]; then
            jq ".version = \"$NEW_VERSION\"" package-lock.json > package-lock.json.tmp
            mv package-lock.json.tmp package-lock.json
          fi

          echo "‚úÖ Vers√£o atualizada para $NEW_VERSION"

      - name: Commit version update
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/Hagave/Athenas.git
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }} [skip ci]" || true
          git push origin main

      - name: Create and push tag
        run: |
          NEW_TAG="${{ steps.version.outputs.new_tag }}"

          # Criar tag anotada
          git tag -a "$NEW_TAG" -m "Release $NEW_TAG - Auto-generated by GitHub Actions"

          # Push da tag
          git push origin "$NEW_TAG"

          echo "‚úÖ Tag $NEW_TAG criada e enviada"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.new_tag }}
          release_name: Release ${{ steps.version.outputs.new_tag }}
          body: |
            ## üöÄ Release ${{ steps.version.outputs.new_tag }}

            ### ‚úÖ Quality Checks Passed
            - ‚úÖ Linting passed
            - ‚úÖ Tests passed with >60% coverage
            - ‚úÖ SonarQube quality gate passed
            - ‚úÖ No console.* usage detected

            ### üìä Coverage Report
            Coverage: $(node -p "require('./coverage/coverage-summary.json').total.lines.pct")%

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.version.outputs.last_tag }}...${{ steps.version.outputs.new_tag }}
          draft: false
          prerelease: false

      # Aqui voc√™ pode adicionar seus steps de deploy espec√≠ficos
      - name: Deploy Application
        run: |
          echo "üöÄ Iniciando deploy da vers√£o ${{ steps.version.outputs.new_version }}"
          # Adicione aqui seus comandos de deploy espec√≠ficos
          # Exemplos:
          # - Deploy para AWS, Azure, GCP
          # - Build e push de Docker images
          # - Deploy para Kubernetes
          # - Atualiza√ß√£o de servi√ßos

          echo "‚úÖ Deploy realizado com sucesso!"
